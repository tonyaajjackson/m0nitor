#!/bin/bash

cachepath="/var/cache/m0nitor/"

# Argument parsing code copied from:
# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f

if [[ "$#" -eq 0 ]]; then
    echo "m0nitor: a script for alerting via discord if a host goes online or offfline."
    echo "Arguments are required unless otherwise specified"
    echo ""
    echo "--host                    IP address or fully qualified domain name of host"
    echo "--server-name             Name of server in alert"
    echo "--webhook                 Discord webhook URL"
    echo "-d/--debug (optional)     Prints debug messages during run"
    exit 0
fi

PARAMS=""

while (( "$#" )); do
    case "$1" in
        -d|--debug)
            debug_echo="echo"
            shift
            ;;
        --host)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                host=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        --server-name)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                server_name=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        --webhook)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                webhook=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done

# Set positional arguments in their proper place
eval set -- "$PARAMS"


# Handle missing parameters
if [[ -z ${host+x} ]]; then
    echo "--host not specified. Please specify host with either IP address or fully qualified domain name."
    exit 1
fi

if [[ -z ${server_name+x} ]]; then
    echo "--server-name not specified. Please provide a name for this server to be included in alert messages."
    exit 1
fi

if [[ -z ${debug_echo+x} ]]; then
    debug_echo=":"
fi


statefile="$cachepath$is_down_$host"

# Use negative form of booleans so 0 is good and 1 is bad to match unix command exit codes
if [ -f "$statefile" ]; then
    missing_statefile=0
    read -r is_down <"$statefile"
    $debug_echo "Read value is_down=$is_down from statefile in $statefile"

    if [[ $is_down != 0 ]] && [[ $is_down != 1 ]]; then
    $debug_echo "Invalid state is_down=$is_down. Setting is_down=1 to assume server is offline"
    is_down=1
    else
        $debug_echo "State is valid"
    fi
else
    missing_statefile=1
    $debug_echo "Could not find statefile in $statefile. Setting is_down=1 to assume server is offline."
    is_down=1
fi

ping_failure=$( ping -c 1 $host 2>&1 >/dev/null )$?

if [[ $is_down = 0 ]] && [[ $ping_failure = 0 ]]; then
    $debug_echo "Server is still online"

elif [[ $is_down = 1 ]] && [[ $ping_failure = 1 ]]; then
    $debug_echo "Server is still offline"
    
    if [[ $missing_statefile == 1 ]]; then
        msg="m0nitor startup: $server_name is offline."
        $debug_echo $msg
        curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$msg\"}" $webhook
        
        $debug_echo "Creating new statefile in $statefile"
        printf 1 > "$statefile"
    fi

elif [[ $is_down = 0 ]] && [[ $ping_failure = 1 ]]; then
    msg="$server_name has gone offline"
    $debug_echo $msg
    curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$msg\"}" $webhook
    printf 1 > "$statefile"

elif [[ $is_down = 1 ]] && [[ $ping_failure = 0 ]]; then
    if [[ $missing_statefile == 1 ]]; then
        msg="m0nitor startup: $server_name is online."
        $debug_echo $msg
        curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$msg\"}" $webhook
    else
        msg="$server_name is back online"
        $debug_echo $msg
        curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$msg\"}" $webhook
    fi
    printf 0 > "$statefile"
fi